---
import TestimonialCard from './TestimonialCard.astro';

const testimonials = await Astro.glob("../content/testimonials/*.md");

function shuffleArray(array: any[]) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

const randomTestimonials = shuffleArray(testimonials).slice(0, 3);
---
<div class="testimonial-slider-wrapper">
    <div class="testimonial-slider" role="region" aria-labelledby="testimonials-heading">
        {randomTestimonials.map((testimonial, index: number) => (
            <div class="testimonial-slide" id={`slide-${index}`} role="group" aria-roledescription="slide">
                <TestimonialCard
                    name={testimonial.frontmatter.name}
                    rating={testimonial.frontmatter.rating}
                    quote={testimonial.frontmatter.testimonial}
                />
            </div>
        ))}
    </div>
    <div class="indicators" role="tablist" aria-label="Testimonials Navigation">
        {randomTestimonials.map((_, index: number) => (
            <span class="indicator" role="tab" aria-controls={`slide-${index}`} data-slide={index}></span>
        ))}
    </div>
</div>

<div class="btn-wrapper center">
    <a href="/testimonials" class="btn secondary" aria-label="Read more testimonials">Read More Testimonials</a>
</div>

<style>
.testimonial-slider-wrapper {
    overflow-x: hidden;
    overflow-y: visible;
    width: 100%;
    padding: 0.5rem 0.25rem 0.75rem 0rem;
}

.testimonial-slider {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-top: 2rem;
    position: relative;
}

.indicators {
    display: none;
}

.center {
    display: flex;
    justify-content: center;
}

@media (max-width: 983px) {
    .testimonial-slider-wrapper {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    .testimonial-slider {
        display: flex;
        overflow-x: auto;
        gap: 1rem;
        padding: 1rem 0;
        box-sizing: content-box;
        scroll-behavior: smooth;
        scroll-snap-type: x mandatory;
    }

    .testimonial-slide {
        scroll-snap-align: center;
        flex-shrink: 0;
        width: 80%;
        box-sizing: border-box;
    }

    .indicators {
        display: flex;
        justify-content: center;
        margin-top: 10px;
    }

    .indicator {
        width: 10px;
        height: 10px;
        background-color: var(--wheat-200);
        border-radius: 50%;
        margin: 0 5px;
        transition: background-color 0.3s;
        cursor: pointer;
    }

    .indicator.active {
        background-color: var(--wheat-500);
    }

    .testimonial-slider::-webkit-scrollbar {
        display: none;
    }

    .testimonial-slider {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const slides = Array.from(document.querySelectorAll('.testimonial-slide'));
    const indicators = document.querySelectorAll('.indicator');
    const slider = document.querySelector('.testimonial-slider');
    let currentSlide = 0;

    function updateIndicators(index) {
        indicators.forEach((indicator, i) => {
            indicator.classList.remove('active');
            if (i === index) {
                indicator.classList.add('active');
            }
        });
    }

    function calculateCurrentSlide() {
        const scrollLeft = slider ? slider.scrollLeft : 0;
        const slideWidth = slides[0].clientWidth;
        const newSlideIndex = Math.round(scrollLeft / slideWidth);
        if (newSlideIndex !== currentSlide) {
            currentSlide = newSlideIndex;
            updateIndicators(currentSlide);
        }
    }

    if (slider) {
        slider.addEventListener('scroll', () => {
            calculateCurrentSlide();
        });
    }

    updateIndicators(currentSlide);

    indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
            currentSlide = index;
            updateIndicators(currentSlide);
            if (slider) {
                slider.scrollTo({
                    left: (slides[currentSlide] as HTMLElement).offsetLeft,
                    behavior: 'smooth',
                });
            }
        });
    });
});
    </script>